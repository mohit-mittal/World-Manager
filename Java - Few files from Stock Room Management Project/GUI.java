
import java.awt.List;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Objects;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mohit Mittal SID: 4677985
 */
public class GUI extends javax.swing.JFrame {

    private Socket s;
    ArrayList<Parts> objParts;
    ArrayList<Orders> objOrders;
    public ThreadedConnect obj = new ThreadedConnect();
    int pId;
    DefaultTableModel defaultPartsModel;

    public int getPid() {
        return pId;
    }

    public void setPid(int pId) {
        this.pId = pId;
    }
    private ObjectInputStream objIS = null;  // Streams definition for connection
    private ObjectOutputStream objOS = null;  // Streams definition for connection

    public ObjectInputStream getObjIS() {
        return objIS;
    }

    public void setObjIS(ObjectInputStream objIS) {
        this.objIS = objIS;
    }

    public ObjectOutputStream getObjOS() {
        return objOS;
    }

    public void setObjOS(ObjectOutputStream objOS) {
        this.objOS = objOS;
    }
    private Parts mypart;

    /**
     * Creates new form ordersgui
     */
    public GUI() {

        //  Connecting to the server
        try {
            this.s = new Socket("127.0.0.1", 2000);
            this.objOS = new ObjectOutputStream(s.getOutputStream());
            this.objIS = new ObjectInputStream(s.getInputStream());
            System.out.println("Connected");
        } catch (IOException e) {
            System.out.printf("Error connecting wth the Server %s\n", e);
        }  // end try to set connection
        initComponents();
        try {
            fillPartsTableArray();
            fillOrdersTableArray();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbed_pane_all = new javax.swing.JTabbedPane();
        panel_parts_tab = new javax.swing.JPanel();
        button_add_part = new javax.swing.JButton();
        button_modify_part = new javax.swing.JButton();
        button_delete_part = new javax.swing.JButton();
        button_all_parts = new javax.swing.JButton();
        button_low_stock = new javax.swing.JButton();
        scroll_pane_table_parts = new javax.swing.JScrollPane();
        table_parts = new javax.swing.JTable();
        panel_orders_tab = new javax.swing.JPanel();
        label_suppliers_orders_tab = new javax.swing.JLabel();
        combo_box_suppliers_orders_tab = new javax.swing.JComboBox();
        label_parts_orders_tab = new javax.swing.JLabel();
        label_status_orders_tab = new javax.swing.JLabel();
        combo_box_parts_orders_tab = new javax.swing.JComboBox();
        combo_box_status_orders_tab = new javax.swing.JComboBox();
        button_all_orders_tab = new javax.swing.JButton();
        scroll_pane_orders_tab = new javax.swing.JScrollPane();
        table_orders = new javax.swing.JTable();
        button_create_order = new javax.swing.JButton();
        button_modify_order = new javax.swing.JButton();
        button_delete_order = new javax.swing.JButton();
        button_print_order = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        button_add_part.setText("Add Part");
        button_add_part.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_add_partActionPerformed(evt);
            }
        });

        button_modify_part.setText("View/Modify");
        button_modify_part.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_modify_partActionPerformed(evt);
            }
        });

        button_delete_part.setText("Delete");
        button_delete_part.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_delete_partActionPerformed(evt);
            }
        });

        button_all_parts.setText("Show All");
        button_all_parts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_all_partsActionPerformed(evt);
            }
        });

        button_low_stock.setText("Low Stock");
        button_low_stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_low_stockActionPerformed(evt);
            }
        });

        table_parts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Part ID", "Manufacturer", "Manufacturer Part No", "Description", "Stock Level", "Low Stock Level", "Shelf Location", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scroll_pane_table_parts.setViewportView(table_parts);

        javax.swing.GroupLayout panel_parts_tabLayout = new javax.swing.GroupLayout(panel_parts_tab);
        panel_parts_tab.setLayout(panel_parts_tabLayout);
        panel_parts_tabLayout.setHorizontalGroup(
            panel_parts_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_parts_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_parts_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_parts_tabLayout.createSequentialGroup()
                        .addComponent(button_add_part)
                        .addGap(30, 30, 30)
                        .addComponent(button_modify_part)
                        .addGap(41, 41, 41)
                        .addComponent(button_delete_part)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(button_all_parts)
                        .addGap(41, 41, 41)
                        .addComponent(button_low_stock))
                    .addComponent(scroll_pane_table_parts))
                .addContainerGap())
        );
        panel_parts_tabLayout.setVerticalGroup(
            panel_parts_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_parts_tabLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(panel_parts_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_add_part)
                    .addComponent(button_modify_part)
                    .addComponent(button_delete_part)
                    .addComponent(button_all_parts)
                    .addComponent(button_low_stock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll_pane_table_parts, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbed_pane_all.addTab("Parts", panel_parts_tab);

        label_suppliers_orders_tab.setText("Suppliers");

        combo_box_suppliers_orders_tab.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "------" }));
        combo_box_suppliers_orders_tab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_suppliers_orders_tabActionPerformed(evt);
            }
        });

        label_parts_orders_tab.setText("Parts");

        label_status_orders_tab.setText("Status");

        combo_box_parts_orders_tab.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "------" }));

        combo_box_status_orders_tab.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "------", "Open", "Past Expected Date", "Open & Past Expected Date" }));
        combo_box_status_orders_tab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_box_status_orders_tabActionPerformed(evt);
            }
        });

        button_all_orders_tab.setText("View All");
        button_all_orders_tab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_all_orders_tabActionPerformed(evt);
            }
        });

        table_orders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Supplier", "Status", "Expected Delivery", "Completed Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scroll_pane_orders_tab.setViewportView(table_orders);

        button_create_order.setText("Create");
        button_create_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_create_orderActionPerformed(evt);
            }
        });

        button_modify_order.setText("View/Modify");
        button_modify_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_modify_orderActionPerformed(evt);
            }
        });

        button_delete_order.setText("Delete");
        button_delete_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_delete_orderActionPerformed(evt);
            }
        });

        button_print_order.setText("Print");
        button_print_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_print_orderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_orders_tabLayout = new javax.swing.GroupLayout(panel_orders_tab);
        panel_orders_tab.setLayout(panel_orders_tabLayout);
        panel_orders_tabLayout.setHorizontalGroup(
            panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_orders_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_orders_tabLayout.createSequentialGroup()
                        .addComponent(scroll_pane_orders_tab, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(panel_orders_tabLayout.createSequentialGroup()
                        .addGroup(panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panel_orders_tabLayout.createSequentialGroup()
                                .addComponent(button_create_order)
                                .addGap(88, 88, 88)
                                .addComponent(button_modify_order)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_delete_order)
                                .addGap(87, 87, 87)
                                .addComponent(button_print_order))
                            .addGroup(panel_orders_tabLayout.createSequentialGroup()
                                .addGroup(panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label_parts_orders_tab)
                                    .addComponent(label_status_orders_tab)
                                    .addComponent(label_suppliers_orders_tab, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_orders_tabLayout.createSequentialGroup()
                                        .addComponent(combo_box_status_orders_tab, 0, 398, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(button_all_orders_tab))
                                    .addComponent(combo_box_suppliers_orders_tab, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(combo_box_parts_orders_tab, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        panel_orders_tabLayout.setVerticalGroup(
            panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_orders_tabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_box_suppliers_orders_tab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_suppliers_orders_tab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_box_parts_orders_tab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_parts_orders_tab))
                .addGap(12, 12, 12)
                .addGroup(panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_box_status_orders_tab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_status_orders_tab)
                    .addComponent(button_all_orders_tab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scroll_pane_orders_tab, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_orders_tabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_print_order)
                    .addComponent(button_delete_order)
                    .addComponent(button_modify_order)
                    .addComponent(button_create_order))
                .addContainerGap())
        );

        tabbed_pane_all.addTab("Orders", panel_orders_tab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbed_pane_all)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbed_pane_all, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_all_orders_tabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_all_orders_tabActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_button_all_orders_tabActionPerformed

    private void combo_box_suppliers_orders_tabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_suppliers_orders_tabActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_box_suppliers_orders_tabActionPerformed

    private void button_add_partActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_add_partActionPerformed
        // TODO add your handling code here:
        final PartInfo info = new PartInfo(this);
        info.setTitle("Add new part");

        info.showWindow();
        Parts getParts = info.getData();

        if (getParts.getManufacturer() != null) {

            try {
                Message messageToSend = new Message("STORE_PART", getParts);
                objOS.writeObject(messageToSend);
                objOS.flush();

                objIS.readObject();
            } catch (IOException ex) {
                Logger.getLogger(PartInfo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try {
            fillPartsTableArray();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_add_partActionPerformed

    private void button_create_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_create_orderActionPerformed
        // TODO add your handling code here:
        OrderInfo info = new OrderInfo(objParts);

        info.setTitle("Create new Order");
        info.showWindow();
        Orders order = info.getOrder();
        if (order.getSupplier() != null) {

            try {
                Message messageToSend = new Message("Store_Order", order);
                objOS.writeObject(messageToSend);
                objOS.flush();

                objIS.readObject();
            } catch (IOException ex) {
                Logger.getLogger(PartInfo.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_button_create_orderActionPerformed

    private void button_modify_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_modify_orderActionPerformed
        // TODO add your handling code here:
        if (table_orders.getSelectedRowCount() > 0) {

            try {
                // TODO add your handling code here:
                Integer selectedOrderID = (int) table_orders.getModel().getValueAt(table_orders.getSelectedRow(), 0);

                Message messageToSend = new Message("getSelectedOrder", selectedOrderID);
                objOS.writeObject(messageToSend);
                objOS.flush();

                Message response = (Message) objIS.readObject();

                Orders objOrder = (Orders) response.getData();
                OrderInfo info = new OrderInfo(objParts);
                info.setTitle("View/Modify Order");
                Orders order = info.getOrder();
                info.setFields(objOrder);
                info.showWindow();
                
                Message newMsg = new Message("Modify_Order", order);
                objOS.writeObject(newMsg);
                objOS.flush();

                Message resp = (Message) objIS.readObject();

                fillOrdersTableArray();
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_button_modify_orderActionPerformed

    private void button_delete_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_delete_orderActionPerformed
        // TODO add your handling code here:
        if (table_orders.getSelectedRowCount() > 0) {

            try {
                // TODO add your handling code here:
                Integer selectedOrderID = (int) table_orders.getModel().getValueAt(table_orders.getSelectedRow(), 0);
                try {
                    Message newMsg = new Message("Delete_Order", selectedOrderID);
                    objOS.writeObject(newMsg);
                    objOS.flush();
                    objIS.readObject();
                } catch (IOException ex) {
                    Logger.getLogger(PartInfo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                fillOrdersTableArray();;
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select at least one row to delete");
        }


    }//GEN-LAST:event_button_delete_orderActionPerformed

    private void button_print_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_print_orderActionPerformed
        try {
            // TODO add your handling code here:

            table_orders.print();
        } catch (PrinterException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_print_orderActionPerformed

    private void button_modify_partActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_modify_partActionPerformed

        if (table_parts.getSelectedRowCount() > 0) {

            try {
                final PartInfo info = new PartInfo(this);
                info.setTitle("Modify new part");
                Parts myParts = new Parts();
                myParts.setPartID((int) table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 0));
                myParts.setManufacturer(table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 1).toString());
                myParts.setManuf_part_ID(table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 2).toString());
                myParts.setDescription(table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 3).toString());
                myParts.setStock_level((int) table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 4));
                myParts.setLow_stock_limit((int) table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 5));
                myParts.setShelf_location(table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 6).toString());
                myParts.setPrice(Float.parseFloat(table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 7).toString()));
                info.setTextFields(myParts);
                info.showWindow();
                Parts getParts = info.getData();
                getParts.setPartID(myParts.getPartID());
                if (getParts.getManufacturer() != null) {
                    try {
                        Message newMsg = new Message("Modify_Part", getParts);
                        objOS.writeObject(newMsg);
                        objOS.flush();
                        objIS.readObject();

                    } catch (IOException ex) {
                        Logger.getLogger(PartInfo.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                fillPartsTableArray();
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select at least one row to Modify");
        }
    }//GEN-LAST:event_button_modify_partActionPerformed

    private void button_delete_partActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_delete_partActionPerformed
        if (table_parts.getSelectedRowCount() > 0) {

            try {
                // TODO add your handling code here:
                Integer selectedPartID = (int) table_parts.getModel().getValueAt(table_parts.getSelectedRow(), 0);
                try {
                    Message newMsg = new Message("Delete_Part", selectedPartID);
                    objOS.writeObject(newMsg);
                    objOS.flush();
                    objIS.readObject();
                } catch (IOException ex) {
                    Logger.getLogger(PartInfo.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                fillPartsTableArray();;
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select at least one row to delete");
        }

    }//GEN-LAST:event_button_delete_partActionPerformed

    private void button_all_partsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_all_partsActionPerformed
        try {

           // TODO add your handling code here:
            fillPartsTableArray();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_all_partsActionPerformed

    private void button_low_stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_low_stockActionPerformed

        // TODO add your handling code here:
        clearTable();

        for (int i = 0; i < objParts.size(); i++) {
            if (objParts.get(i).getLow_stock_limit() >= objParts.get(i).getStock_level()) {
                fillPartsTable(objParts.get(i));
            }
        }

    }//GEN-LAST:event_button_low_stockActionPerformed

    private void combo_box_status_orders_tabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_box_status_orders_tabActionPerformed
        // TODO add your handling code here:
        String selectedStatus = (String) combo_box_status_orders_tab.getSelectedItem();
        
    }//GEN-LAST:event_combo_box_status_orders_tabActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    public void fillPartsTable(Parts element) {
        defaultPartsModel = (DefaultTableModel) table_parts.getModel();
        Vector newRow = new Vector();

        newRow.add(element.getPartID());
        newRow.add(element.getManufacturer());
        newRow.add(element.getManuf_part_ID());
        newRow.add(element.getDescription());
        newRow.add(element.getStock_level());
        newRow.add(element.getLow_stock_limit());
        newRow.add(element.getShelf_location());
        newRow.add(element.getPrice());
        defaultPartsModel.addRow(newRow);
    }

    public static String toStringYesNo(boolean bool) {
        return toString(bool, "yes", "no");
    }

    public static String toString(boolean bool, String trueString, String falseString) {
        return bool ? trueString : falseString;
    }

    public void fillOrdersTable(Orders element) {
        DefaultTableModel defaultModel = (DefaultTableModel) table_orders.getModel();
        Vector newRow = new Vector();
        newRow.add(element.getOrder_id());
        newRow.add(element.getSupplier());
        newRow.add(element.getStatus());
        newRow.add(element.getExpected_delivery());
        if (Objects.equals(element.getCompleted_status().toString(), "true")) {
            newRow.add("Yes");
        } else if (Objects.equals(element.getCompleted_status().toString(), "false")) {
            newRow.add("No");
        }
        defaultModel.addRow(newRow);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add_part;
    private javax.swing.JButton button_all_orders_tab;
    private javax.swing.JButton button_all_parts;
    private javax.swing.JButton button_create_order;
    private javax.swing.JButton button_delete_order;
    private javax.swing.JButton button_delete_part;
    private javax.swing.JButton button_low_stock;
    private javax.swing.JButton button_modify_order;
    private javax.swing.JButton button_modify_part;
    private javax.swing.JButton button_print_order;
    private javax.swing.JComboBox combo_box_parts_orders_tab;
    private javax.swing.JComboBox combo_box_status_orders_tab;
    private javax.swing.JComboBox combo_box_suppliers_orders_tab;
    private javax.swing.JLabel label_parts_orders_tab;
    private javax.swing.JLabel label_status_orders_tab;
    private javax.swing.JLabel label_suppliers_orders_tab;
    private javax.swing.JPanel panel_orders_tab;
    private javax.swing.JPanel panel_parts_tab;
    private javax.swing.JScrollPane scroll_pane_orders_tab;
    private javax.swing.JScrollPane scroll_pane_table_parts;
    private javax.swing.JTabbedPane tabbed_pane_all;
    private javax.swing.JTable table_orders;
    private javax.swing.JTable table_parts;
    // End of variables declaration//GEN-END:variables

    private void fillPartsTableArray() throws IOException, ClassNotFoundException {

        clearTable();
        Message messageToSend = new Message("Part_Data_From_DB", null);
        objOS.writeObject(messageToSend);
        objOS.flush();

        Message response = (Message) objIS.readObject();
        objParts = (ArrayList<Parts>) response.getData();
        for (int i = 0; i < objParts.size(); i++) {
            fillPartsTable(new Parts(objParts.get(i).getPartID(), objParts.get(i).getManufacturer(), objParts.get(i).getManuf_part_ID(), objParts.get(i).getDescription(), objParts.get(i).getStock_level(), objParts.get(i).getLow_stock_limit(), objParts.get(i).getShelf_location(), objParts.get(i).getPrice()));
        }
    }

    private void fillOrdersTableArray() throws IOException, ClassNotFoundException {

        clearOrdersTable();
        Message messageToSend = new Message("Everything_from_OrderDB", null);
        objOS.writeObject(messageToSend);
        objOS.flush();

        Message response = (Message) objIS.readObject();
        objOrders = (ArrayList<Orders>) response.getData();
        for (int i = 0; i < objOrders.size(); i++) {
            fillOrdersTable(objOrders.get(i));
        }

    }

    private void clearTable() {
        DefaultTableModel tableObj = (DefaultTableModel) table_parts.getModel();
        int totalRows = tableObj.getRowCount();
        for (int i = totalRows - 1; i >= 0; i--) {
            tableObj.removeRow(i);
        }

    }

    private void clearOrdersTable() {
        DefaultTableModel tableObj = (DefaultTableModel) table_orders.getModel();
        int totalRows = tableObj.getRowCount();
        for (int i = totalRows - 1; i >= 0; i--) {
            tableObj.removeRow(i);
        }

    }
}
